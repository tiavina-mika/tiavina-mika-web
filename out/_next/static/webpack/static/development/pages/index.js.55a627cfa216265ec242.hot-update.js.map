{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.55a627cfa216265ec242.hot-update.js","sources":["webpack:///./components/home/Contact.tsx"],"sourcesContent":["import React, { FC, useState, ChangeEvent, FormEvent } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport { useSelector } from 'react-redux';\n\nimport BlockTitle from '../Common/BlockTitle';\nimport { animate, itemVariants } from '../../animations/cards';\nimport { media, lgScreenWidth } from '../../utils/constants';\nimport { screenState } from '../../reducers/appReducer';\nimport Button from '../Common/Button';\nimport clsx from 'clsx';\nimport PlxComponent from '../Common/PlxComponent';\n\nconst useStyles = createUseStyles((theme: any) => ({\n    fullColumn: {\n        composes: 'flexColumn stretchSelf',\n    },\n    centered: {\n        composes: 'flexRow justifyCenter alignCenter',\n    },\n    columnStretch: {\n        composes: '$fullColumn flex1',\n    },\n    root: {\n        composes: '$fullColumn justifyCenter',\n        fontFamily: 'Montserrat-Regular',\n        fontSize: 20,\n        letterSpacing: '0.68px',\n        color: '#fff',\n        [media.lgDown]: {\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            marginTop: theme.spacing(8),\n        },\n    },\n    content: {\n        composes: '$fullColumn center',\n        [media.mdUp]: {\n            marginTop: theme.spacing(8),\n        },\n    },\n    center: {\n        composes: 'flexRow justifyCenter',\n        paddingBottom: theme.spacing(6),\n        [media.lgUp]: {\n            width: lgScreenWidth - 300,\n            marginTop: theme.spacing(4),\n        },\n        [media.lgDown]: {\n            justifyContent: 'flex-start',\n            flexDirection: 'column',\n        },\n        [media.mdLg]: {\n            width: 600,\n        },\n        [media.smMd]: {\n            width: '90%',\n        },\n    },\n    left: {\n        composes: 'flexRow',\n        '& h6': {\n            fontSize: 20,\n            lineHeight: 1.3,\n            fontWeight: 300,\n            [media.mdDown]: {\n                fontSize: 18,\n                lineHeight: 1.5,\n            },\n        },\n        [media.lgUp]: {\n            flex: 1,\n        },\n    },\n    right: {\n        composes: 'flexRow stretchSelf flex1 justifyCenter',\n        [media.lgDown]: {\n            marginTop: theme.spacing(6),\n            opacity: 0,\n        },\n        [media.lgUp]: {\n            flex: 1,\n        },\n    },\n    formContainer: {\n        width: 400,\n        [media.lgDown]: {\n            width: '100%',\n        },\n    },\n    contactItems: {\n        composes: 'flexColumn',\n        marginTop: theme.spacing(6),\n    },\n    contactItem: {\n        composes: '$centered',\n        marginBottom: theme.spacing(5),\n    },\n    contactIcon: {\n        marginRight: theme.spacing(2.5),\n        [media.xsDown]: {\n            marginRight: theme.spacing(1),\n        },\n    },\n    contactDetail: {\n        composes: 'flexColumn',\n        [media.xsDown]: {\n            marginRight: theme.spacing(1),\n            flex: 1,\n        },\n    },\n    icon: {\n        composes: 'flexRow justifyCenter center',\n        border: '1px solid #fff',\n        height: 50,\n        width: 50,\n        borderRadius: '50%',\n    },\n    label: {},\n    value: {\n        fontSize: 18,\n        opacity: 0.6,\n        fontWeight: 300,\n        marginTop: theme.spacing(1),\n        [media.smUp]: {\n            width: 300,\n        },\n    },\n    items: {\n        composes: 'flexColumn flexStart',\n        marginBottom: theme.spacing(8),\n        '& span': {\n            marginLeft: 10,\n        },\n    },\n    item: {\n        composes: 'flexColumn justifyCenter center',\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(2),\n        width: 90,\n        [media.smDown]: {\n            marginBottom: 0,\n        },\n    },\n    field: {\n        composes: '$columnStretch',\n        marginBottom: theme.spacing(3),\n    },\n    input: {\n        composes: 'flexColumn stretchSelf',\n        border: `1px solid #fff`,\n        backgroundColor: '#000',\n        height: 60,\n        borderRadius: 30,\n        paddingLeft: 15,\n        paddingRight: 15,\n        fontFamily: 'Montserrat',\n        color: '#fff',\n        fontSize: 14,\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    errorInput: {\n        border: '1px solid red',\n    },\n    errorMessage: {\n        color: 'red',\n        fontSize: 12,\n    },\n    textarea: {\n        paddingTop: 10,\n    },\n    buttonContainer: {\n        composes: '$columnStretch',\n    },\n    button: {\n        backgroundColor: theme.color.primary,\n        color: '#fff',\n        borderRadius: 30,\n        height: 60,\n        fontSize: 18,\n        width: '100%',\n    },\n}));\n\nconst contacts = [\n    {\n        label: 'Téléphone',\n        icon: 'phone',\n        value: '+261341865749',\n    },\n    {\n        label: 'Email',\n        icon: 'mail',\n        value: 'tiavinamika@gmail.com',\n    },\n    {\n        label: 'Adresse',\n        icon: 'home',\n        value: 'Lot VN 50B Ankazolava, Ambohitsoa, Antananarivo, Madagascar',\n    },\n];\n\ninterface State {\n    name: string;\n    email: string;\n    message: string;\n}\n\nconst Contact: FC = () => {\n    const classes = useStyles();\n    const isMobile = useSelector(screenState);\n    const [error, setError] = useState<State>({\n        name: '',\n        email: '',\n        message: '',\n    });\n\n    const [values, setValues] = useState<State>({\n        name: '',\n        email: '',\n        message: '',\n    });\n\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: false,\n    });\n\n    const handleChange = (prop: keyof State) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const { email, message } = values;\n        if (!email) setError({ ...error, email: 'Veuillez entrer votre email' });\n        if (message && message.length > 100) {\n            setError({ ...error, message: 'Le message ne doit pas depasser 100 caractères' });\n            return;\n        }\n    };\n\n    /** Components */\n    const Div = isMobile ? 'div' : motion.div;\n\n    /** Animation */\n    const itemsAnimation = (inView) => (isMobile ? {} : animate(inView));\n    const itemAnimation = isMobile ? {} : itemVariants;\n\n    const textParallaxData = [\n        {\n            start: `.contact-text-trigger`,\n            duration: '40vh',\n            properties: [\n                {\n                    startValue: 10,\n                    endValue: -20,\n                    unit: 'vh',\n                    property: 'translateY',\n                },\n                {\n                    startValue: 0,\n                    endValue: 1,\n                    property: 'opacity',\n                },\n            ],\n        },\n    ];\n\n    const formParallaxData = [\n        {\n            start: `.contact-form-trigger`,\n            duration: '40vh',\n            properties: [\n                {\n                    startValue: 20,\n                    endValue: -3,\n                    unit: 'vh',\n                    property: 'translateY',\n                },\n                {\n                    startValue: 0,\n                    endValue: 1,\n                    property: 'opacity',\n                },\n            ],\n        },\n    ];\n\n\n    return (\n        <div className={classes.root} id=\"contact\">\n            <BlockTitle title=\"Contact\" subtitle=\"N'hésitez pas à me contacter\" icon=\"passion\" />\n            <div className={classes.content} ref={ref}>\n                <div className={classes.center}>\n                    <PlxComponent\n                        className={classes.left}\n                        parallaxData={textParallaxData}\n                        triggerClass=\"contact-text-trigger\"\n                        trigger={20}>\n                        <h6>\n                            Vous recherchez un designer ou un développeur ? Laissez-moi un message, je vous répondrai\n                            rapidement !\n                        </h6>\n                        <Div className={classes.contactItems} {...itemsAnimation(inView)}>\n                            {contacts.map((contact, index) => (\n                                <Div className={classes.contactItem} key={index} {...itemAnimation}>\n                                    <div className={classes.contactIcon}>\n                                        <div className={classes.icon}>\n                                            <img src={`images/icons/${contact.icon}.svg`} alt=\"\" />\n                                        </div>\n                                    </div>\n                                    <div className={classes.contactDetail}>\n                                        <span className={classes.label}>{contact.label}</span>\n                                        <span className={classes.value}>{contact.value}</span>\n                                    </div>\n                                </Div>\n                            ))}\n                        </Div>\n                    </PlxComponent>\n                    <PlxComponent\n                        className={classes.right}\n                        parallaxData={formParallaxData}\n                        // triggerClass=\"contact-form-trigger\"\n                        trigger={30}>\n                        <form className={classes.formContainer} onSubmit={onSubmit}>\n                            {/* <div className={classes.formContainer}> */}\n                                <div className={classes.field}>\n                                    <input\n                                        placeholder=\"Votre nom\"\n                                        className={clsx(classes.input, error.name ? classes.errorInput : null)}\n                                        onChange={handleChange('name')}\n                                        value={values.name}\n                                        required\n                                    />\n                                </div>\n                                <div className={classes.field}>\n                                    <input\n                                        placeholder=\"Votre email\"\n                                        className={classes.input}\n                                        type=\"email\"\n                                        onChange={handleChange('email')}\n                                        value={values.email}\n                                        required\n                                    />\n                                </div>\n                                <div className={classes.field}>\n                                    <textarea\n                                        placeholder=\"Votre message\"\n                                        className={clsx(\n                                            classes.input,\n                                            classes.textarea,\n                                            error.message ? classes.errorInput : null\n                                        )}\n                                        onChange={handleChange('message')}\n                                        value={values.message}\n                                        rows={20}\n                                        required></textarea>\n                                    {error.message && <span className={classes.errorMessage}>{error.message}</span>}\n                                </div>\n                                <div className={classes.buttonContainer}>\n                                    <Button text=\"Envoyer\" type=\"submit\" className={classes.button} />\n                                </div>\n                            {/* </div> */}\n                        </form>\n                    </PlxComponent>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Contact;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAHA;AAMA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AADA;AAIA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AANA;AAYA;AADA;AAIA;AACA;AADA;AAGA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AADA;AAIA;AACA;AADA;AAGA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAIA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAXA;AAeA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAnKA;AAAA;AA6KA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AAHA;AAHA;AAAA;AACA;AADA;AAUA;AACA;AACA;AAHA;AATA;AAAA;AACA;AADA;AAgBA;AACA;AAFA;AAfA;AAAA;AAAA;AACA;AAmBA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAVA;AAmBA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AAHA;AAVA;AAogBA;AACA;AAFA;AAIA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;;;;A","sourceRoot":""}