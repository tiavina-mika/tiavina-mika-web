{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.d47740f8e6ac4c1fe349.hot-update.js","sources":["webpack:///./components/home/competences/cards/Cards.tsx"],"sourcesContent":["import React, { FC, useMemo } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport Card from './Card';\nimport clsx from 'clsx';\nimport { screenState } from '../../../../reducers/appReducer';\nimport { useSelector } from 'react-redux';\nimport { media } from '../../../../utils/constants';\n\nconst y = 40;\nconst useStyles = createUseStyles((theme: any) => ({\n    cardsRoot: {\n        composes: 'flexRow justifyStart alignCenter flex1',\n    },\n    cardsDesktop: {\n        composes: 'flexColumn justifyCenter alignCenter',\n        position: 'absolute',\n    },\n    cardsMobile: {\n        composes: 'flexColumn center flex1',\n        [media.mdLg]: {\n            flexDirection: 'row',\n            flexWrap: 'wrap',\n            justifyContent: 'space-between',\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n        }\n    },\n    firstCard: {\n        transform: 'translateY(-10vh)',\n    },\n    otherCard: {\n        transform: `translateY(${y}vh)`,\n        opacity: 0,\n    },\n}));\n\ninterface Property {\n    startValue: string | number;\n    endValue: string | number;\n    unit?: string;\n    property: string;\n}\ninterface Sequence {\n    start: string | number;\n    startOffset: string | number;\n    duration?: string;\n    properties: Property[];\n}\n\nconst getOffsets = (index: number): any => {\n    const offsets: number[][] = [\n        /** index, startOffset animation start */\n        [0, 0],\n        [1, 80],\n        [2, 160],\n        [3, 240],\n        [4, 320],\n        [5, 400],\n        [6, 480],\n    ];\n    let offsetAnimationEnd: number;\n    offsets.map((offset: number[]): void => {\n        if (index === offset[0]) {\n            offsetAnimationEnd = offset[1];\n        }\n    });\n    return offsetAnimationEnd;\n};\n\ntype Props = { triggerClassName: string; items: any; onCurrentStep: (value: string) => void };\nconst Cards: FC<Props> = ({ triggerClassName, items, onCurrentStep }) => {\n    const classes = useStyles();\n    const isMobile = useSelector(screenState);\n\n    const setParallaxData = (index: number): any => {\n        const offsetAnimationEnd = getOffsets(index);\n\n        const properties = [];\n        if (index !== 0) {\n            properties.push({\n                startValue: y,\n                endValue: -10,\n                unit: 'vh',\n                property: 'translateY',\n            });\n        } else {\n            properties.push({\n                startValue: -10,\n                endValue: -10,\n                unit: 'vh',\n                property: 'translateY',\n            });\n        }\n        const enterAnimationPropreties: Property[] = [\n            {\n                startValue: 0,\n                endValue: 1,\n                property: 'opacity',\n            },\n        ];\n        const enterAnimationSequence: Sequence = {\n            start: `.${triggerClassName}`,\n            startOffset: `${offsetAnimationEnd - 10}vh`,\n            duration: '1vh',\n            properties: enterAnimationPropreties,\n        };\n        const exitAnimationSequence: Sequence = {\n            start: `.${triggerClassName}`,\n            startOffset: `${offsetAnimationEnd}vh`,\n            duration: '50vh',\n            properties,\n        };\n\n        return useMemo(() => [enterAnimationSequence, exitAnimationSequence], []);\n    };\n\n    const cardsProps = isMobile\n        ? { className: classes.cardsMobile }\n        : { className: clsx(classes.cardsDesktop, triggerClassName) };\n\n    return (\n        <div className={classes.cardsRoot}>\n            <div {...cardsProps}>\n                {items.map((item, i) => (\n                    <Card\n                        key={i}\n                        className={!isMobile && (i === 0 ? classes.firstCard : classes.otherCard)}\n                        parallaxData={setParallaxData(i)}\n                        data={{ ...item, ranking: `${i + 1} / ${items.length}` }}\n                        onPlxEnd={onCurrentStep}\n                    />\n                ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Cards;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AADA;AAGA;AACA;AACA;AAFA;AArBA;AAAA;AACA;AAuCA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AAJA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAYA;AACA;AACA;;;;A","sourceRoot":""}