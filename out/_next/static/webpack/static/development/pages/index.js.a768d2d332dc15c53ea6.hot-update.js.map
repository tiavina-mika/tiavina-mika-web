{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.a768d2d332dc15c53ea6.hot-update.js","sources":["webpack:///./components/home/about/About.tsx","webpack:///./components/home/contact/Contact.tsx"],"sourcesContent":["import React, { FC, useState, useEffect } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport clsx from 'clsx';\nimport { motion, useViewportScroll } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport { useSelector } from 'react-redux';\n\nimport BlockTitle from '../../Common/BlockTitle';\nimport { media, lgScreenWidth } from '../../../utils/constants';\nimport { animate } from '../../../animations/about';\nimport { downloadButtonAnimation } from '../../../animations/app';\nimport { screenState } from '../../../reducers/appReducer';\nimport Button from '../../Common/Button';\n\nconst useStyles = createUseStyles((theme: any) => ({\n    rowStretch: {\n        composes: 'flexRow justifyCenter stretchSelf',\n    },\n    root: {\n        composes: 'flexRow flex1 justifyCenter',\n        fontFamily: 'Prequelrough, sans-serif',\n        paddingBottom: theme.spacing(8),\n        [media.lgUp]: {\n            marginTop: theme.spacing(30),\n            paddingBottom: theme.spacing(30),\n        },\n        [media.mdDown]: {\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n        },\n    },\n    content: {\n        composes: '$rowStretch',\n        [media.lgDown]: {\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: theme.spacing(5),\n        },\n        [media.lgUp]: {\n            width: lgScreenWidth - 400,\n            marginTop: theme.spacing(20),\n        },\n    },\n    center: {\n        composes: 'flexColumn',\n        [media.smLg]: {\n            width: '60%',\n        },\n    },\n    left: {\n        composes: 'flexColumn center flex1',\n        '& > img': {\n            width: '100%',\n        },\n        [media.smUp]: {\n            '& > img': {\n                width: 300,\n            },\n            flex: 1,\n        },\n        [media.xsSm]: {\n            '& > img': {\n                width: '60%',\n            },\n        },\n    },\n    right: {\n        '& h3': {\n            color: theme.color.grey,\n            fontWeight: '400',\n            lineHeight: 1.4,\n            textTransform: 'uppercase',\n            letterSpacing: 3.5,\n        },\n        '& h2': {\n            color: '#fff',\n            fontWeight: '400',\n            lineHeight: 1.4,\n            textTransform: 'uppercase',\n            letterSpacing: 3.5,\n            marginTop: 10,\n            [media.lgUp]: {\n                width: 650,\n            },\n        },\n        [media.lgUp]: {\n            flex: 2,\n            paddingLeft: theme.spacing(5),\n            paddingRight: theme.spacing(5),\n        },\n        [media.lgDown]: {\n            marginTop: theme.spacing(8),\n        },\n    },\n    descriptionText: {\n        lineHeight: 1.8,\n        marginTop: theme.spacing(3),\n        fontSize: 20,\n        [media.mdDown]: {\n            fontSize: 16,\n        },\n    },\n    shortDescription: {\n        color: theme.color.subtitle,\n        fontFamily: 'Montserrat, sans-serif',\n\n        [media.lgUp]: {\n            width: 650,\n        },\n    },\n    description: {\n        fontFamily: 'Montserrat-Regular, sans-serif',\n        color: '#fff',\n    },\n    buttonContainer: {\n        composes: 'flexRow justifyCenter stretchSelf',\n        marginTop: theme.spacing(20),\n        [media.mdDown]: {\n            marginTop: theme.spacing(1.2),\n        },\n    },\n    button: {\n        flex: 1,\n    },\n}));\n\nconst About: FC = () => {\n    const classes = useStyles();\n    const [value, setValue] = useState(0);\n    const isMobile = useSelector(screenState);\n\n    const [ref, inView] = useInView({\n        threshold: 0.1,\n        triggerOnce: false,\n    });\n\n    const { scrollYProgress } = useViewportScroll();\n\n    useEffect(() => {\n        scrollYProgress.onChange((latest) => setValue(latest));\n    }, []);\n\n    /** Components */\n    const H3 = isMobile ? 'h3' : motion.h3;\n    const H2 = isMobile ? 'h2' : motion.h2;\n    const Div = isMobile ? 'div' : motion.div;\n    const Img = isMobile ? 'img' : motion.img;\n\n    /** Animation */\n    const h3Animation = isMobile ? {} : animate(inView);\n    const h2Animation = isMobile ? {} : animate(inView, 2);\n    const shortDescriptionAnimation = isMobile ? {} : animate(inView, 3);\n    const descriptionAnimation = isMobile ? {} : animate(inView, 3);\n\n    return (\n        <div className={classes.root} ref={ref}>\n            <BlockTitle\n                title=\"A propos de moi\"\n                subtitle=\"Qui suis-je\"\n                right\n                animateIcon\n                startAnimation={inView}\n                icon=\"setting\"\n            />\n            <div className={classes.content}>\n                <div className={classes.center}>\n                    <div className={classes.left}>\n                        <Img\n                            alt=\"\"\n                            src=\"/images/profile.jpg\"\n                            style={inView ? { scale: 0.5 + value } : {}}\n                            // style={inView ? { scale: value ? value : 1, rotate: `${value ? value * 10 : 0}deg` } : {}}\n                        />\n                        <div className={classes.buttonContainer}>\n                            <Button\n                                text=\"Télécharger mon CV\"\n                                icon=\"download\"\n                                animation={downloadButtonAnimation(inView)}\n                                className={classes.button}\n                            />\n                        </div>\n                    </div>\n                    <div className={classes.right}>\n                        <H3 {...h3Animation}>Tiavina Michael Ralainirina</H3>\n                        <H2 {...h2Animation}>Développeur FullStack / Web Designer / Lead Developpeur</H2>\n                        <Div\n                            {...shortDescriptionAnimation}\n                            className={clsx(classes.shortDescription, classes.descriptionText)}>\n                            <span>\n                                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque\n                                laudantium, totam rem aperiam\n                            </span>\n                        </Div>\n                        <Div {...descriptionAnimation} className={clsx(classes.description, classes.descriptionText)}>\n                            <span>\n                                Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque\n                                laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas\n                                sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                                voluptatem sequi nesciunt. Neque porro quisquam est, qui dolorem ipsum quia dolor sit\n                                amet, consectetur, adipisci velit, sed quia\n                            </span>\n                        </Div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default About;\n","import React, { FC, useState, ChangeEvent, FormEvent } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { motion } from 'framer-motion';\nimport { useInView } from 'react-intersection-observer';\nimport { useSelector } from 'react-redux';\n\nimport BlockTitle from '../../Common/BlockTitle';\nimport { animate, itemVariants } from '../../../animations/cards';\nimport { media, lgScreenWidth } from '../../../utils/constants';\nimport { screenState } from '../../../reducers/appReducer';\nimport Button from '../../Common/Button';\nimport clsx from 'clsx';\n\nconst useStyles = createUseStyles((theme: any) => ({\n    fullColumn: {\n        composes: 'flexColumn stretchSelf',\n    },\n    centered: {\n        composes: 'flexRow justifyCenter alignCenter',\n    },\n    columnStretch: {\n        composes: '$fullColumn flex1',\n    },\n    root: {\n        composes: '$fullColumn justifyCenter',\n        fontFamily: 'Montserrat-Regular',\n        fontSize: 20,\n        letterSpacing: '0.68px',\n        color: '#fff',\n        [media.mdDown]: {\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n        },\n    },\n    content: {\n        composes: '$fullColumn center',\n        [media.mdUp]: {\n            marginTop: theme.spacing(8),\n        },\n    },\n    center: {\n        composes: 'flexRow justifyCenter',\n        paddingBottom: theme.spacing(6),\n        [media.lgUp]: {\n            width: lgScreenWidth - 300,\n            marginTop: theme.spacing(4),\n        },\n        [media.lgDown]: {\n            justifyContent: 'flex-start',\n            flexDirection: 'column',\n        },\n        [media.mdLg]: {\n            width: 600,\n        },\n        [media.mdDown]: {\n            width: '90%',\n        },\n    },\n    left: {\n        composes: 'flexRow',\n        '& h6': {\n            fontSize: 20,\n            lineHeight: 1.3,\n            fontWeight: 300,\n        },\n        [media.lgUp]: {\n            flex: 1,\n        },\n    },\n    right: {\n        composes: 'flexRow stretchSelf flex1 justifyCenter',\n        [media.lgDown]: {\n            marginTop: theme.spacing(6),\n        },\n        [media.lgUp]: {\n            flex: 1,\n        },\n    },\n    formContainer: {\n        width: 400,\n        [media.lgDown]: {\n            width: '100%',\n        },\n    },\n    contactItems: {\n        composes: 'flexColumn',\n        marginTop: theme.spacing(6),\n    },\n    contactItem: {\n        composes: '$centered',\n        marginBottom: theme.spacing(5),\n    },\n    contactIcon: {\n        marginRight: theme.spacing(2.5),\n    },\n    contactDetail: {\n        composes: 'flexColumn',\n    },\n    icon: {\n        composes: 'flexRow justifyCenter center',\n        border: '1px solid #fff',\n        height: 50,\n        width: 50,\n        borderRadius: '50%',\n    },\n    label: {},\n    value: {\n        fontSize: 18,\n        opacity: 0.6,\n        fontWeight: 300,\n        marginTop: theme.spacing(1),\n        width: 300,\n    },\n    items: {\n        composes: 'flexColumn flexStart',\n        marginBottom: theme.spacing(8),\n        '& span': {\n            marginLeft: 10,\n        },\n    },\n    item: {\n        composes: 'flexColumn justifyCenter center',\n        marginBottom: theme.spacing(2),\n        marginLeft: theme.spacing(2),\n        width: 90,\n        [media.smDown]: {\n            marginBottom: 0,\n        },\n    },\n    field: {\n        composes: '$columnStretch',\n        marginBottom: theme.spacing(3),\n    },\n    input: {\n        composes: 'flexColumn stretchSelf',\n        border: `1px solid #fff`,\n        backgroundColor: '#000',\n        height: 60,\n        borderRadius: 30,\n        paddingLeft: 15,\n        paddingRight: 15,\n        fontFamily: 'Montserrat',\n        color: '#fff',\n        fontSize: 14,\n        '&:focus': {\n            outline: 'none',\n        },\n    },\n    errorInput: {\n        border: '1px solid red',\n    },\n    errorMessage: {\n        color: 'red',\n        fontSize: 12,\n    },\n    textarea: {\n        paddingTop: 10,\n    },\n    buttonContainer: {\n        composes: '$columnStretch',\n    },\n    button: {\n        backgroundColor: theme.color.primary,\n        color: '#fff',\n        borderRadius: 30,\n        height: 60,\n        fontSize: 18,\n        width: '100%',\n    },\n}));\n\nconst contacts = [\n    {\n        label: 'Téléphone',\n        icon: 'phone',\n        value: '+261341865749',\n    },\n    {\n        label: 'Email',\n        icon: 'mail',\n        value: 'tiavinamika@gmail.com',\n    },\n    {\n        label: 'Adresse',\n        icon: 'home',\n        value: 'Lot VN 50B Ankazolava, Ambohitsoa, Antananarivo, Madagascar',\n    },\n];\n\ninterface State {\n    name: string;\n    email: string;\n    message: string;\n}\n\nconst Contact: FC = () => {\n    const classes = useStyles();\n    const isMobile = useSelector(screenState);\n    const [error, setError] = useState<State>({\n        name: '',\n        email: '',\n        message: '',\n    });\n\n    const [values, setValues] = useState<State>({\n        name: '',\n        email: '',\n        message: '',\n    });\n\n    const [ref, inView] = useInView({\n        threshold: 0.2,\n        triggerOnce: false,\n    });\n\n    const handleChange = (prop: keyof State) => (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>): void => {\n        setValues({ ...values, [prop]: event.target.value });\n    };\n\n    const onSubmit = (event: FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        const { email, message } = values;\n        if (!email) setError({ ...error, email: 'Veuillez entrer votre email' });\n        if (message && message.length > 100) {\n            setError({ ...error, message: 'Le message ne doit pas depasser 100 caractères' });\n            return;\n        }\n    };\n\n    /** Components */\n    const Div = isMobile ? 'div' : motion.div;\n\n    /** Animation */\n    const itemsAnimation = (inView) => (isMobile ? {} : animate(inView));\n    const itemAnimation = isMobile ? {} : itemVariants;\n\n    return (\n        <div className={classes.root}>\n            <BlockTitle\n                title=\"Contact\"\n                subtitle=\"N'hésitez pas à me contacter\"\n                startAnimation={inView}\n                icon=\"passion\"\n            />\n            <div className={classes.content} ref={ref}>\n                <Div className={classes.center} {...itemsAnimation(inView)}>\n                    <Div className={classes.left} {...itemAnimation}>\n                        <h6>\n                            Vous recherchez un designer ou un développeur ? Laissez-moi un message, je vous répondrai\n                            rapidement !\n                        </h6>\n                        <Div className={classes.contactItems} {...itemsAnimation(inView)}>\n                            {contacts.map((contact, index) => (\n                                <Div className={classes.contactItem} key={index} {...itemAnimation}>\n                                    <div className={classes.contactIcon}>\n                                        <div className={classes.icon}>\n                                            <img src={`images/icons/${contact.icon}.svg`} alt=\"\" />\n                                        </div>\n                                    </div>\n                                    <div className={classes.contactDetail}>\n                                        <span className={classes.label}>{contact.label}</span>\n                                        <span className={classes.value}>{contact.value}</span>\n                                    </div>\n                                </Div>\n                            ))}\n                        </Div>\n                    </Div>\n                    <motion.form className={classes.right} onSubmit={onSubmit} {...itemAnimation}>\n                        <div className={classes.formContainer}>\n                            <div className={classes.field}>\n                                <input\n                                    placeholder=\"Votre nom\"\n                                    className={clsx(classes.input, error.name ? classes.errorInput : null)}\n                                    onChange={handleChange('name')}\n                                    value={values.name}\n                                    required\n                                />\n                            </div>\n                            <div className={classes.field}>\n                                <input\n                                    placeholder=\"Votre email\"\n                                    className={classes.input}\n                                    type=\"email\"\n                                    onChange={handleChange('email')}\n                                    value={values.email}\n                                    required\n                                />\n                            </div>\n                            <div className={classes.field}>\n                                <textarea\n                                    placeholder=\"Votre message\"\n                                    className={clsx(\n                                        classes.input,\n                                        classes.textarea,\n                                        error.message ? classes.errorInput : null\n                                    )}\n                                    onChange={handleChange('message')}\n                                    value={values.message}\n                                    rows={20}\n                                    required></textarea>\n                                {error.message && <span className={classes.errorMessage}>{error.message}</span>}\n                            </div>\n                            <div className={classes.buttonContainer}>\n                                <Button text=\"Envoyer\" type=\"submit\" className={classes.button} />\n                            </div>\n                        </div>\n                    </motion.form>\n                </Div>\n            </div>\n        </div>\n    );\n};\n\nexport default Contact;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AACA;AACA;AAHA;AAMA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AACA;AADA;AAFA;AAMA;AACA;AADA;AAGA;AAJA;AAOA;AACA;AADA;AADA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AADA;AAfA;AAoBA;AACA;AACA;AAHA;AAMA;AADA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AADA;AAIA;AACA;AACA;AAFA;AAKA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AADA;AAIA;AACA;AADA;AA3GA;AAAA;AACA;AA+GA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AAJA;AAMA;AACA;AAFA;AALA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AAWA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClNA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AAFA;AAKA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AAFA;AAKA;AACA;AAFA;AAKA;AADA;AAIA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AADA;AAIA;AACA;AADA;AAGA;AADA;AAIA;AADA;AAIA;AACA;AADA;AAGA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AADA;AAHA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AADA;AAIA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAXA;AAeA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AApJA;AAAA;AA8JA;AAEA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AACA;AAYA;AACA;AACA;AACA;AAHA;AAIA;AACA;AACA;AAHA;AAHA;AAAA;AACA;AADA;AAUA;AACA;AACA;AAHA;AATA;AAAA;AACA;AADA;AAgBA;AACA;AAFA;AAfA;AAAA;AAAA;AACA;AAmBA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AADA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AADA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;;;;A","sourceRoot":""}